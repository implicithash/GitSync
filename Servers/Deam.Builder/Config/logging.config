<?xml version="1.0" encoding="utf-8"?>

<configuration>
  <configSections>
    <section name="loggingConfiguration"
             type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
             requirePermission="true" />
    <section name="exceptionHandling"
             type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
             requirePermission="true" />
  </configSections>
  <loggingConfiguration name="Logging Application Block"
                        tracingEnabled="true"
                        defaultCategory="Info"
                        logWarningsWhenNoCategoriesMatch="true">
    <listeners>
      <add name="Exceptions Rolling Flat File Trace Listener"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
           listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
           fileName="Logs\exceptions.log"
           footer="&lt;-----------------------------------------------------------------------------------------------------------------------------------------&gt;"
           formatter="Text Formatter"
           header=""
           rollFileExistsBehavior="Increment"
           rollInterval="Day"
           rollSizeKB="2048"
           timeStampPattern="dd-MM-yyyy"
           traceOutputOptions="None"
           filter="All" />
      <add name="General Rolling Flat File Trace Listener"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
           listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
           fileName="Logs\general.log"
           footer=""
           formatter="Lite Text Formatter"
           header=""
           rollFileExistsBehavior="Increment"
           rollInterval="Day"
           rollSizeKB="2048"
           timeStampPattern="dd-MM-yyyy"
           traceOutputOptions="DateTime"
           filter="All" />
      <add
        listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        type="System.Diagnostics.DefaultTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        traceOutputOptions="None"
        filter="All"
        name="System.Diagnostics TraceListener"
        initializeData="" />
      <add name="Warning Flat File Trace Listener"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
           listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
           fileName="Logs\warnings.log"
           footer="-------------------------------------------------------------------------------------------------"
           formatter="Text Formatter"
           header=""
           rollFileExistsBehavior="Increment"
           rollInterval="Day"
           rollSizeKB="2048"
           timeStampPattern="dd-MM-yyyy" />
    </listeners>
    <formatters>
      <add
        type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        template="{timestamp(local)}  {message}"
        name="Lite Text Formatter" />
      <add
        type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        template="Policy Name: {title}{newline}&#xA;EventId:{eventid}{newline}&#xA;{message}&#xA;{newline}"
        name="Text Formatter" />
    </formatters>
    <categorySources>
      <add switchValue="All"
           name="Debug">
        <listeners>
          <add name="System.Diagnostics TraceListener" />
        </listeners>
      </add>
      <add switchValue="All"
           name="Exception">
        <listeners>
          <add name="Exceptions Rolling Flat File Trace Listener" />
          <add name="System.Diagnostics TraceListener" />
        </listeners>
      </add>
      <add switchValue="All"
           name="Info">
        <listeners>
          <add name="General Rolling Flat File Trace Listener" />
          <add name="System.Diagnostics TraceListener" />
        </listeners>
      </add>
      <add switchValue="All"
           autoFlush="false"
           name="Warn">
        <listeners>
          <add name="System.Diagnostics TraceListener" />
          <add name="Warning Flat File Trace Listener" />
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All"
                 name="All Events" />
      <notProcessed switchValue="All"
                    name="Unprocessed Category" />
      <errors switchValue="All"
              name="Logging Errors &amp; Warnings" />
    </specialSources>
  </loggingConfiguration>
  <exceptionHandling>
    <exceptionPolicies>
      <add name="Warning Server Policy">
        <exceptionTypes>
          <add name="Exception"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="None">
            <exceptionHandlers>
              <add name="Logging Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Warn"
                   eventId="101"
                   severity="Warning"
                   title="Warning Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=6.0.1304.0, Culture=neutral"
                   priority="0"
                   useDefaultLogger="false" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="Warning Outward Server Policy">
        <exceptionTypes>
          <add name="BusinessLogicException"
               type="EW.Navigator.Contracts.BusinessLogicException, EW.Navigator.Contracts, Culture=neutral"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Warn"
                   eventId="100"
                   severity="Warning"
                   title="Outward Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.OutwardServiceExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="OutwardServiceExceptionHandler" />
            </exceptionHandlers>
          </add>
          <add name="All Exceptions"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Warning"
                   eventId="103"
                   severity="Warning"
                   title="Outward Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.OutwardServiceExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="OutwardServiceExceptionHandler" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="Outward Server Policy">
        <exceptionTypes>
          <add name="BusinessLogicException"
               type="EW.Navigator.Contracts.BusinessLogicException, EW.Navigator.Contracts, Culture=neutral"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Warn"
                   eventId="100"
                   severity="Warning"
                   title="Outward Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.OutwardServiceExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="OutwardServiceExceptionHandler" />
            </exceptionHandlers>
          </add>
          <add name="ObjectDisposedException"
               type="System.ObjectDisposedException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Warn"
                   eventId="100"
                   severity="Warning"
                   title="Object Disposed Outward Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.OutwardServiceExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="OutwardServiceExceptionHandler" />
            </exceptionHandlers>
          </add>
          <add name="All Exceptions"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Exception"
                   eventId="103"
                   severity="Error"
                   title="Outward Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.OutwardServiceExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="OutwardServiceExceptionHandler" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="Only Logging Policy">
        <exceptionTypes>
          <add name="Exception"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="None">
            <exceptionHandlers>
              <add name="Logging Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Exception"
                   eventId="102"
                   severity="Error"
                   title="Only Logging Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=6.0.1304.0, Culture=neutral"
                   priority="0"
                   useDefaultLogger="false" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>

      <add name="CallDispatcher Server Policy">
        <exceptionTypes>
          <add name="BusinessLogicException"
               type="EW.Navigator.Contracts.BusinessLogicException, EW.Navigator.Contracts, Culture=neutral"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Warn"
                   eventId="100"
                   severity="Warning"
                   title="Outward Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.OutwardServiceExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="OutwardServiceExceptionHandler" />
            </exceptionHandlers>
          </add>
          <add name="All Exceptions"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Warning"
                   eventId="103"
                   severity="Warning"
                   title="Outward Server Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.OutwardServiceExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="OutwardServiceExceptionHandler" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
      <add name="FirstServiceClientPolicy">
        <exceptionTypes>
          <add name="FaultException"
               type="System.ServiceModel.FaultException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="NotifyRethrow" />
          <add name="ProtocolException"
               type="System.ServiceModel.ProtocolException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="NotifyRethrow" />
          <add name="ActionNotSupportedException"
               type="System.ServiceModel.ActionNotSupportedException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="NotifyRethrow" />
          <add name="CommunicationException"
               type="System.ServiceModel.CommunicationException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="NotifyRethrow" />
          <add name="All Exceptions"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="NotifyRethrow" />
        </exceptionTypes>
      </add>
      <add name="SecondServiceClientPolicy">
        <exceptionTypes>
          <add name="All Exceptions"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="NotifyRethrow" />
        </exceptionTypes>
      </add>
      <add name="Outward Policy">
        <exceptionTypes>
          <add name="OutwardException"
               type="EW.Navigator.Servers.Common.Exceptions.OutwardException, EW.Navigator.Servers.Common, Culture=neutral"
               postHandlingAction="NotifyRethrow" />
          <add name="All Exceptions"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   logCategory="Exception"
                   eventId="105"
                   severity="Critical"
                   title="Outward Policy"
                   formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   priority="0" />
              <add name="Replace Handler"
                   type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=6.0.1304.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                   exceptionMessage="Возникла внутренняя ошибка службы. Детали см. в журнале ошибок сервера."
                   replaceExceptionType="EW.Navigator.Servers.Common.Exceptions.OutwardException, EW.Navigator.Servers.Common, Culture=neutral" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>

      <add name="EntityFramework Policy">
        <exceptionTypes>
          <add name="All Exceptions"
               type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add
                type="EW.Navigator.Servers.Common.ExceptionHandling.EntityFrameworkExceptionHandler, EW.Navigator.Servers.Common, Culture=neutral"
                name="EntityFrameworkExceptionHandler" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>
</configuration>